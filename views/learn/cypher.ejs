<div class="badge">
  <h3>Briefly</h3>
  <p>Cypher is a Graph Query Language</p>
  <ul>
    <li>it is human readable and expressive</li>
    <li>MATCHes patterns in the graph</li>
    <li>is about the <strong>what</strong> not how</li>
  </ul>
</div>

<div class="featured" class="mainElement">
  <script type="text/javascript">
        function nextTab(elem) {
          $(elem).find('li.active').removeClass('active')
            .next().addClass('active')
            .find('a[data-toggle="tab"]')
            .click();
        }
        function prevTab(elem) {
          $(elem + ' li.active')
            .prev()
            .find('a[data-toggle="tab"]')
            .click();
        }
        function runCypher() {
            var cypher=$(this).text();
            if (cypher.indexOf(";")==-1) return;
            runConsole(cypher);
        }
        function addPlayButton() {
            var play=$('<div id="play-button" class="btn icon-play" title="Run Cypher Query"></div>')
            $("pre").mouseenter(function() {
                var pos={top:$(this).position().top+5,
                         left:$(this).position().left+$(this).width()-10};
                play.appendTo($(this)).css(pos) 
            });
            $("pre").mouseleave(function() {
               play.detach() 
            });

            $("code, pre").click(runCypher);
            play.click(function() { runCypher($(this).parent()) })
        }
      $(document).ready(function(){

          startConsole();
          addPlayButton();
          $("#tabs").tabs();
          $("#next-button").click(function() {
              nextTab("#tabs");
          })
      });
      function runConsole(cypher) {
          if (frames['neo4j-console']) {
              frames['neo4j-console'].send(cypher);
          }
      }
      function startConsole() {
          if (!frames['neo4j-console']) {
            var url = "/console?id=cineasts";
            var iframe = $('<iframe name="neo4j-console" width="100%" height="500" src="'+url+'"/>');
            $('#console').html(iframe);
          }
      }
  </script>

    <div id="tabs">
      <ul>
        <li class="active"><a href="#intro" data-toggle="tab">1. Intro</a></li>
        <li><a href="#firststeps" data-toggle="tab">2. First steps with Cypher</a></li>
        <li><a href="#explore" data-toggle="tab">3. Explore a dataset</a></li>
        <li><a href="#update" data-toggle="tab">4. Updating the graph</a></li>
        <li><a href="#paths" data-toggle="tab">5. Paths everywhere</a></li>
        <li><a href="#setups" data-toggle="tab">6. Other Setups</a></li>
      </ul>

      <div class="clear"></div>

      <div id="intro">
          <h3>Intro</h3>
          <ul>
              <!--li>Make sure to get the <a href="http://neo4j.org/resources/cypher" target="_blank">Cypher Cheat Sheet</a> first.</li-->
              <!--<li>To start with the tutorial please <a class="btn-mini btn btn-primary" onclick="startConsole(); return false;" href="#">open the interactive console</a><br/>&nbsp;</li>-->
              <li>Our example graph consists of <code>movies</code> with an <code>id</code>, <code>year</code> and <code>title</code> and <code>actors</code> with a <code>name</code>.
                  Actors have an <code>:ACTS_IN</code> relationship to movies, which represents the
                  <code>role</code> they played, the role relationship has also a <code>role</code> attribute.
              </li>
              <li>We encourage you to enter the Cypher statements in the interactive console manually, but you can also click on the code snippets. <br/>Like this one
                  <pre>START n=node(*) 
RETURN "Hello Graph with "+count(*)+" Nodes!" 
     as welcome;</pre>
              </li>
              <img src="/assets/img/still/cineasts.gif"/>
          </ul>
      </div><!-- intro -->

      <div id="firststeps">
          <h3>First steps with Cypher</h3>
          <ul>
              <li>
return a single node, by id (The Matrix) <br/><pre>START movie=<%=tutorial.matrix%> 
RETURN movie;</pre></li>
              <li>
return the title and id of the matrix node <br/><pre>START movie=<%=tutorial.matrix%>  
RETURN movie.id, movie.title;</pre></li>
              <li>first use of the 
MATCH clause, show all actors
                  <br/><pre>START m=<%=tutorial.matrix%>  
MATCH m&lt;-[:ACTS_IN]-actor 
RETURN actor;</pre></li>
              <li>
return just the name, order them by name
                  <br/><pre>START m=<%=tutorial.matrix%> 
MATCH m&lt;-[:ACTS_IN]-actor 
RETURN actor.name order by actor.name;</pre></li>
              <li>first aggregation, count the actors
                  <br/><pre>START m=<%=tutorial.matrix%> 
MATCH m&lt;-[:ACTS_IN]-actor 
RETURN count(*);</pre></li>
              <li>first filtering only the actors whose names end with "s"
                  <br/><pre>START m=<%=tutorial.matrix%>  
MATCH m&lt;-[:ACTS_IN]-actor 
WHERE actor.name =~ ".*s$" 
RETURN actor.name ;</pre></li>
          </ul>
      </div><!-- firststeps -->


      <div id="explore">
          <h3>Explore a dataset</h3>
          <ul>
              <li>some exploratory queries for unknown datasets, <strong>don&#8217;t do that on live production instances</strong></li>
              <li>Count nodes <br/><pre>START n=node(*)  
RETURN count(*);</pre></li>
              <li>Count relationship types <br/><pre>START n=node(*)  
MATCH n-[r]-&gt;() 
RETURN type(r), count(*);</pre></li>
              <li>List all nodes and their relationships<br/><pre>START n=node(*)    
MATCH n-[r]-&gt;m 
RETURN n as from, r as `->`, m as to;</pre></li>
          </ul>
      </div><!-- explore -->

      <div id="update">
          <h3>Updating the graph</h3>

          <ul>
              <li>we will add ourselves, friends and ratings</li>
              <li>add a node for yourself and 
return it, let's say your name is "Me" <br/><pre>CREATE me={name: "Me"} 
RETURN me;</pre>
              </li>
              <li>let's check if the node is there: <br/><pre>START me=<%=tutorial.me%>  
RETURN me.name;</pre></li>
              <li>I want to rate a movie <br/><pre>START me=<%=tutorial.me%>, movie=<%=tutorial.matrix%> 
CREATE me-[:RATED {stars : 5, comment : "I love that movie!"}]-&gt;movie;</pre></li>
              <li>which movies did I rate <br/><pre>START me=<%=tutorial.me%> 
MATCH me-[r:RATED]-&gt;movie 
RETURN r.stars,
                  r.comment,movie.title;</pre></li>
              <li>we need a friend <br/><pre>CREATE friend={name: "A Friend"} 
RETURN friend;</pre></li>
              <li>add our friendship idempotently, so we can re-run the query without adding it several times, we return the
                  relationship to check that it has not been created several times
                  <br/><pre>START me=<%=tutorial.me%>, friend=<%=tutorial.friend%> 
CREATE UNIQUE me-[r:FRIEND]-&gt;friend 
RETURN r;</pre></li>
              <li>rerun the query</li>
              <li>update our friendship with a <code>since</code> property
                  <br/><pre>START me=<%=tutorial.me%>, friend=<%=tutorial.friend%>  
MATCH me-[r:FRIEND]-&gt;friend 
SET r.since='forever' 
RETURN r;</pre></li>
              <li>we pretend us being our friend and wanting to see which movies our friends have rated
                  <br/><pre>START me=<%=tutorial.friend%>  
MATCH me-[:FRIEND]-friend-[r:RATED]-&gt;movie 
RETURN movie.title, avg(r.stars) as stars, collect(r.comment) as comments, count(*);</pre></li>
              <li>that's too little data, let's add some more friends and friendships
                  <br/><pre>START me=<%=tutorial.me%> 
FOREACH (i in range(1,10) : 
CREATE friend={name: "Friend "+i}, me-[:FRIEND]->friend);</pre>
              </li>
          </ul>
      </div><!-- update -->

      <div id="paths">
          <h3>Paths everywhere</h3>

          <ul>
          <li>same setup as before, with all the added friends and ratings</li>
          <li>lets explore the relationships between the actors</li>
          <li>All other movies that the matrix actors acted in ordered by occurrence
          <br/><pre>START m=<%=tutorial.matrix%>  
MATCH m&lt;-[:ACTS_IN]-actor-[:ACTS_IN]-&gt;movie 
RETURN movie.title, count(*) order by count(*) desc;</pre></li>
          <li>obviously the Matrix trilogy, but also others, let's see which actors
          <br/><pre>START m=<%=tutorial.matrix%> 
MATCH m&lt;-[:ACTS_IN]-actor-[:ACTS_IN]-&gt;movie 
RETURN movie.title, collect(actor.name), 
     count(*) as count 
ORDER BY count desc;</pre></li>
          <li>what about co-acting, actors that acted together
          <br/><pre>START m=<%=tutorial.matrix%> 
MATCH m&lt;-[:ACTS_IN]-actor-[:ACTS_IN]-&gt;movie
     &lt;-[:ACTS_IN]-colleague  
RETURN actor.name, collect(distinct colleague.name);</pre></li>
          <li>who of those other actors acted most often with anyone from the matrix cast
          <br/><pre>START m=<%=tutorial.matrix%> 
MATCH m&lt;-[:ACTS_IN]-actor-[:ACTS_IN]-&gt;movie
     &lt;-[:ACTS_IN]-colleague 
RETURN colleague.name,count(*) 
ORDER BY count(*) desc LIMIT 10;</pre></li>
          <li>starting with paths, a path is a sequence of nodes and relationships from a start node to an end nod</li>
          <li>we know that Trinity loves Neo, but how many paths exist between their actors; we limit the path length and the query as it exhaustively searches the graph otherwise
          <br/><pre>START neo=<%=tutorial.neo%>, 
trinity=<%=tutorial.trinity%> 
MATCH p = neo-[:ACTS_IN*0..5]-trinity  
RETURN p, length(p) 
LIMIT 10;</pre></li>
          <li>if that's a lot of data, we just want to look at the names and titles of the nods of this path
          <br/><pre>START neo=<%=tutorial.neo%>, 
trinity=<%=tutorial.trinity%> 
MATCH p = neo-[:ACTS_IN*0..5]-trinity  
RETURN extract(n in nodes(p) : 
coalesce(n.title?,n.name?)) as `names and titles`, 
length(p) 
ORDER BY length(p) LIMIT 10 ;</pre></li>
          <!--li>let's explore connections between more people, we choose some other actor
          <pre>START m=<%=tutorial.matrix%>,other=<%=tutorial.morpheus%>  
MATCH m&lt;-[:ACTS_IN]-actor,p   
RETURN colleague.name,count(<em>) order by count(</em>) desc limit 10;</pre>
          </li-->
          </ul>
      </div><!-- paths -->

      <div id="setups">
          <h3>Alternative Setups</h3>
          <ul>
              <li>Use the <a href="/learn/try">Neo4j Console</a> for exploration, sharing and testing</li>
              <li>Deploy an <a href="/develop/example_data">instance of the graph</a> to <a href="/develop/heroku">Heroku</a>, upload the <a href="/develop/heroku#upload">dataset</a> and optionally add a <a href="https://github.com/neo4j-examples/heroku-neo4j-proxy" target="_blank">read-only forwarder</a> to expose the Web Interface</li>
              <li>Connect with the <a href="http://blog.neo4j.org/2012/06/wanted-your-help-in-testing-neo4j-jdbc.html" target="_blank">JDBC driver</a> to a Neo4j Server for integration with existing tools</li>
          </ul>
      </div><!-- setups -->

        <a id="next-button" class="btn">Next</a>
  </div><!-- tabs -->


    <div class="slide console">
      <div id="console"></div>
    </div>

</div><!-- featured -->
